

global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""


kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local
extraDeploy: []
commonLabels: {}
commonAnnotations: {}

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity


image:
  registry: docker.io
  repository: bitnami/memcached
  tag: 1.6.21-debian-11-r107
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
architecture: standalone
auth:
  enabled: false
  username: ""
  password: ""
  existingPasswordSecret: ""
command: []
args: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""


replicaCount: 1
containerPorts:
  memcached: 11211
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 6
  successThreshold: 1
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 15
  successThreshold: 1
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
lifecycleHooks: {}
resources:
  limits: {}
  requests:
    memory: 256Mi
    cpu: 250m
podSecurityContext:
  enabled: true
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
hostAliases: []
podLabels: {}
podAnnotations: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
podManagementPolicy: Parallel
priorityClassName: ""
schedulerName: ""
terminationGracePeriodSeconds: ""
updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}
extraVolumes: []
extraVolumeMounts: []
sidecars: []
initContainers: []
autoscaling:
  enabled: false
  minReplicas: 3
  maxReplicas: 6
  targetCPU: 50
  targetMemory: 50
pdb:
  create: false
  minAvailable: ""
  maxUnavailable: 1


service:
  type: ClusterIP
  ports:
    memcached: 11211
  nodePorts:
    memcached: ""
  sessionAffinity: ""
  sessionAffinityConfig: {}
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  extraPorts: []


serviceAccount:
  create: false
  name: ""
  automountServiceAccountToken: true
  annotations: {}


persistence:
  enabled: false
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  annotations: {}
  labels: {}
  selector: {}


volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r90
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    runAsUser: 0

metrics:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/memcached-exporter
    tag: 0.13.0-debian-11-r121
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  containerPorts:
    metrics: 9150
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.metrics.containerPorts.metrics }}"
  service:
    ports:
      metrics: 9150
    clusterIP: ""
    sessionAffinity: None
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: ""
    scrapeTimeout: ""
    labels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ""
